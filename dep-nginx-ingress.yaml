  apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: example
    namespace: web
    # namespace: cert-manager
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /
  spec:
    ingressClassName: nginx  
    rules:
      - host: localhost
        http:
          paths:
            - pathType: Prefix
              backend:
                service:
                  name: web-service
                  port:
                    number: 80
              path: /
            - pathType: Prefix
              backend:
                service:
                  name: rabbitmq-service
                  port:
                    number: 15672
              path: /rabbitmq
    tls:
      - hosts:
        - localhost
        secretName: nginx-ca-secret                
--- # TLS Secret
apiVersion: v1
kind: Secret
metadata:
  name: nginx-ca-secret
  namespace: web
type: kubernetes.io/tls
data:
  tls.crt: TUlJR0JUQ0NBKzJnQXdJQkFnSVVZclFVNUo2WlE5QW9FbzR6U0k2TnkwNEk3RDR3RFFZSktvWklodmNOQVFFTApCUUF3Z1pFeEN6QUpCZ05WQkFZVEFrWlNNUkV3RHdZRFZRUUlEQWhPWVc1MFpYSnlaVEVUTUJFR0ExVUVCd3dLClEyOTFjbUpsZG05cFpURVRNQkVHQTFVRUNnd0tXVTVQVmlCUVlYSnBjekVOTUFzR0ExVUVDd3dFV1c1dmRqRVMKTUJBR0ExVUVBd3dKYkc5allXeG9iM04wTVNJd0lBWUpLb1pJaHZjTkFRa0JGaE5oYkdGaExtaGhhbkpwUUhsdQpiM1l1WTI5dE1CNFhEVEl6TURNeU56RXpOVEEwTjFvWERUSTBNRE15TmpFek5UQTBOMW93Z1pFeEN6QUpCZ05WCkJBWVRBa1pTTVJFd0R3WURWUVFJREFoT1lXNTBaWEp5WlRFVE1CRUdBMVVFQnd3S1EyOTFjbUpsZG05cFpURVQKTUJFR0ExVUVDZ3dLV1U1UFZpQlFZWEpwY3pFTk1Bc0dBMVVFQ3d3RVdXNXZkakVTTUJBR0ExVUVBd3dKYkc5agpZV3hvYjNOME1TSXdJQVlKS29aSWh2Y05BUWtCRmhOaGJHRmhMbWhoYW5KcFFIbHViM1l1WTI5dE1JSUNJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXdlNXdiNnlTVXFmN2FscUMrVFZjOTFWRkJqWEYKc3cxRFdwVnkzUGtXWkZ3UFNRcDJKamZTb3RCeFlCWmlYUFNlendPdFUzaVZYTHhNZlJoRmtRdFJNU0xpTXdGQgpDd1dLalNFUHh3czR4cW9EalUxSStqaUZnN09XY1VOOXJKcmpXdVdtaUcra1BqVXJWMjR6cXg2elpGMERnV3dsCjFmc25ZR3JKN1VSQnRrelJPT084dnFwNEUxZnhHQXhYS2w3b0Q5N1NjY1BKRUhuMlFpcXdmVnRyTEdkSzdCYWoKUU5nVmVLM05LdnNZTXVtcEF4V3p2NXFzZXR2T0svVXp6cVlDWGIyOUN6c3FSSlVsS09MVEEzUlduT1lneUtPKwpLdFFsRDBlTXgxQ1cvNEdIZytGWTY5Tk05dkxmU0dHR0ordERWdldEOG44dFVqM3F1b1lqR1doK3dTeW0yd1NhCmJXTnBUejhsR3dzVFNpakQ1S216ZXdnbFZzQ1hrbG1KZ29LRHRwall0bDlJOXA5RHRyaVZlOGwwc2wzNnFvRDgKa3E1cjExb2lVcmE0UFBwVlNWak1vY2hRd1V1ZHVDZER6NXEyTjZ0cWhmZ2ZQdzFlTGxGS25ZcklndmJmNjFMaApPTTJ6RHBQc2JodnNXTDNNeXkvYmxtdUIvYXBsZ3BsbGRsOW9VMTBNdG05cmpBQXpZNkN6bERmbG01YmVrOVpaCldBZGsvSWdFaU1GeUkxTlZYbDRudTB4bkNPUU13TStNVnczRlE0Z1huY3M5MzU4N3lFL2h1bzRlR004bVhaaFYKK2p2cElpeHVIK294RzVqdXZUa3l2aFZZSDFBNllKSEZGdkloUDRITnNDcFZOOTdJM2Fzb0Q2dFE5UmZwUkpORgp4RFFjTlpsRml1R2tGdE1DQXdFQUFhTlRNRkV3SFFZRFZSME9CQllFRklJS2hqWHJReElvZG01cnJnM3lEZS84CnMwK3pNQjhHQTFVZEl3UVlNQmFBRklJS2hqWHJReElvZG01cnJnM3lEZS84czArek1BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBQy9GVjVEanErMnE2NE13UE1SRTJZWDdGZHpEV3VCdwpGY2lXMVVXSFRzVXl2MmFEeFBEOFhkQXMzSzYyUjl2VEphRHhzc3kwS2pxaTV3cEdwd0lsaVk1UnFRTm90THVVCmlRM1RSU0ZaTkQzYUJ1WXdtWkdveHd1cE9SWWFRcHQzRFFtRE1seUlKYys2UVl2VzNNWHZGUTZsdWtpcjI0TmYKNE5UL0hmeDAwRVZreUVDREN1VXNud0kzcGV4NHBCUzNCMS9RTytUZklpUTJEQkcremdRMGlWL2dpSWY1UXIrYwpDNFJhaXIvN1RtZjlENHQ3TENQaFNhaW0zSS9IaUxJWEh1ZFRkMER1NnU2OEFhUFpYRjduRzNUdHVzSkU1RFdKCmtiSFFwaUhsU2tzYTlxRWNNb2FnOHdDbFoxMjh1NGNRUm5hUjlyWS9UQ21pMmFWWklWdU5POE9wK2ZaU2NlSUgKU3BQaFRqV0NhK1pTZHdTRGZ1YW1Zdm5JaWl6Q0dVWk1QV1ZRMDhUbElsWXY3MHF3eTllYlJ0RE82YkoycFQweQp6ZmNvVU4xaVR1R0VnZ2JpK29uZG82K0VSZngzU3ZBdkljNEVZWm15OGw2SDZvR21MbTBTU3F1YzhGTUNjKzZhCkJiMm5CVFIydlJCWlhid0k0amhDVWVqVSswNnlIdWJwYWFpUGtRdUZQcHI4Nm9GKzZxWGdOeHdtZWl1bG9vNDYKWEJmbENWM2pzWnk5MFhGTTNpblpnTDJ2NlFnWmd1L1lGM3F4Z2hWQXVkcTd6N2FYdmlKTEFERkwwdEF4VVlBYgpPRUZxdlBZSHBWT0w4WVVTdnNRZHJhTHczVlQ0OEpLOWxMaC9RQStpeGtTbU9MQTNONTVuRTNjVWV0d3RUVnNwCnYzUGU0K1JEbWw1bg==
  tls.key: TUlJSlFnSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NDU3d3Z2drb0FnRUFBb0lDQVFEQjduQnZySkpTcC90cQpXb0w1TlZ6M1ZVVUdOY1d6RFVOYWxYTGMrUlprWEE5SkNuWW1OOUtpMEhGZ0ZtSmM5SjdQQTYxVGVKVmN2RXg5CkdFV1JDMUV4SXVJekFVRUxCWXFOSVEvSEN6akdxZ09OVFVqNk9JV0RzNVp4UTMyc211TmE1YWFJYjZRK05TdFgKYmpPckhyTmtYUU9CYkNYVit5ZGdhc250UkVHMlRORTQ0N3krcW5nVFYvRVlERmNxWHVnUDN0Snh3OGtRZWZaQwpLckI5VzJzc1owcnNGcU5BMkJWNHJjMHEreGd5NmFrREZiTy9tcXg2Mjg0cjlUUE9wZ0pkdmIwTE95cEVsU1VvCjR0TURkRmFjNWlESW83NHExQ1VQUjR6SFVKYi9nWWVENFZqcjAwejI4dDlJWVlZbjYwTlc5WVB5ZnkxU1BlcTYKaGlNWmFIN0JMS2JiQkpwdFkybFBQeVViQ3hOS0tNUGtxYk43Q0NWV3dKZVNXWW1DZ29PMm1OaTJYMGoybjBPMgp1SlY3eVhTeVhmcXFnUHlTcm12WFdpSlN0cmc4K2xWSldNeWh5RkRCUzUyNEowUFBtclkzcTJxRitCOC9EVjR1ClVVcWRpc2lDOXQvclV1RTR6Yk1Payt4dUcreFl2Y3pMTDl1V2E0SDlxbVdDbVdWMlgyaFRYUXkyYjJ1TUFETmoKb0xPVU4rV2JsdDZUMWxsWUIyVDhpQVNJd1hJalUxVmVYaWU3VEdjSTVBekF6NHhYRGNWRGlCZWR5ejNmbnp2SQpUK0c2amg0WXp5WmRtRlg2TytraUxHNGY2akVibU82OU9USytGVmdmVURwZ2tjVVc4aUUvZ2Myd0tsVTMzc2pkCnF5Z1BxMUQxRitsRWswWEVOQncxbVVXSzRhUVcwd0lEQVFBQkFvSUNBQ0RyN3VkdVZ0cTBUS0IxNUJVVlE0WnoKVWNmbm1mdTI3Uyt6L2k5WUU3Nk95RU9BaEtVaFJkOUEzblpPNW56Y1JCZGxpdWVJS1diNFNrM1VNSDhhZWpxSwpydmEwcUV1TU1jU2FqN2lkQlpMb0tya3luUWhwVHZVWUtCcHJPQ3Iwa2xNTWVGUmlDM0pLQ1dVS3ZyZTJld0szCkxaQ3JnTkxPRTVXeEd6MXRvSEFub3o3eW5raUozTjkveHR4cnYrSmdBU29zaS9JbkovdGxrUElUbUNsM3V2NXIKUEpOT2xvRThEWTBTaUNsYlBmVHFxTGZ1MTdoWHRCOFpNR3RTOFd3THo0d0ZXVkhPUmZNbGxJelgwTFdkNnRRdwoxdkRvcHpCVEdrVjVRb05WZ1lTM2d2OVc0b2NLTkY4WnhPRGZPV3lPYWp5WmFrQmc2WnMwQ3FTR2YrL2d4dCtOCk82YkNFUW5NNHhYc0dOWWZEcE9kVDlhQmFVSCtIQ1IxZkhXN2Vta3YzbjY0ZG55NVBhMndFa1VocDI5YzI4aFMKSytYdEVCRzJWR1lGLzd5ZEZzNnpqYytiMVU2ZHVLSnRPMVdleEdRMGxWamxJTkVmUVhWVUR1NGRGaHdkWFdTQwpqL3pod0d3cXpDZ1B2U1prTHo1WHBtVHh6ZmdOakt2WW1TcS9SQm9makFTQS9INitQN0VheERjU01LamFoRFJiCjRxQjduaDZ5UWpCRVh1VjdOMXpTN0lYR2tVT0JqN0dlUUxJSXFBN3RkV1FaNFZZdlhNRHVNaFk1ZWlDZTlxV04Kd1c1WUprR04veGlEQW95bkpWSHhIZWhYejd0SzgveXk1MFovRGdkazJFanY3dHoxeU1ENXRXUXJHR2ZIOGE0TApIUFptUFpFc2pJR1piMm8rQm9odEFvSUJBUURJM2txT083Z0ZBRC8ySFJxY2pKN3ozdVBDTkpuSjdianVCaWNkCm44YXpvU0RPcmtBMTlzeTVmcHE0VndYNlo4c0d3YzVaM2hRWkdXSG1LbHlQZnhOYjExWG1BRWNURmRKL2FlcloKVkdVVWVVYkc2TE1wWWFUaHFyVWpZWFZncU13VjF4alE0V1BTSDFjUTNHTVJxdzdCRnNGMXg5aXArRzYzT214eApGTWN6Vno0ZHJvTjFya254Z2s3MEQzSWtsTnNyVWxlMXRreDFPMm0xbDRnZSszcjdZejE2RllzdlA3VGhRcSsvCm9oeC8rZlZGcGsvdit4dUhqSVBkY05zV25JOEZOVm8rcHg2alNJeEtWTDZYaFFpWG1QeG0wVGJWVXZHZGlKbE8KNWl4NlVDdmhnM2RLakQ4RWMwaStuYktEcnNCc2d3ODZCSEduZ1gvc2RmVHplS2h2QW9JQkFRRDNLTHhUaVlXaQp4cjBXc01QV09uMVRxL29aV2tqS3Y3dFVoU0JjT2tFSDRJN2pPdzhqdFc1cWlpL2xIL3VZU0dSMXNhOHVKaHJCCmY4Zmd2a3VkK3hNSnJGam9tZFlySStWc2tPR3pYU24xVklFQmpYanRsWDVXNklUNHdJY2E3OTRXNXNISkR6RngKdERYaTZ4WHpZVG4vWFFKa3Z1cmJCd2tTQUczZnVMRmpvaFNqUG1lK2E2VHI4MUhCMUFjZ1gxVGJXc3pzME1oQgo1TnBiL1ErdVFvUDdGM2d0azRQZEVNd0xldDdWbFB4SnN4dnVFNzQreUFYWVovdk5aMVU3SHY4a292TGNsZlRBCmhnVWZvM1hza0tUaFBUeWNsTmF6TnVDR09sSzkwRTQ3VHFqc1BWeW0wWUM5a0NnemVxOXVad01sRTdwZ29YWUgKUHB1Zys3b0Y4Y0hkQW9JQkFDUVdPNUsrQzl0cUpoT1RPdnF4RU1XRFg2dStRM3JScUkycXNWQlRLaUdQYXhOMgpucmFUTmtpRkJFcmw1MzhMTXFCdUpTSmtFWHhJNFJ1MnRKWmJJQ0U1MkliUHVmVWwwSUZ2aCsrdmg5RmIwR2xmCjJRQXdPSzBLUEN5MUQ1OWo4L1pnaEdiU2QxcUNvdU8ybEYzU08zNVpGanlRd000WWdkdU5OWHBEWDE1TDZDN3cKOFZFdEZMKzh4MjUxYis0K2gvbUtlNU43d3RTMDdkTGYvR2FFaTUycVFKczBUNk1YY09tZlQyL0FNaHFUejRySgp6RWF5K0VrcjUyemJINkU2VXo5K1RFNUJPL0hkME1aeDN5UGRsS09YcXBEV09XR3QyeGFRT2VyQTAzRE9BblFyCmFEME9ZU3Z0Z2o0c21xdXBzNHhMSjJzbTdUeEl1YkREcUZRdGN5VUNnZ0VCQU1WUGFPRUx0WHFZUzlYMGNiTHgKYUtIR2RsZU5BdldSRU56TmxtTHFRb1ltV0F2QlZ6bTdtcFZGRWkxSlZoSmhJSW53dXBnTjVXZzZPWGdLa3RWZwozZmJuOXVaaUFWN1pQa3RvY2pZOWxzUjZuSzUvb1YyUjdaVTE5UW1jc1g3b3BSVUZUUWpVcnpWRmw0czYvNEFYClN6UzRyTE4rMG9EZVlmaFVEV0wveitWcFBDNkNJRklkSDBFYU0xZVlpOFBsTnhvU3Ard2FWUFI5M1hCNFd1OVQKdklkVVdpV1FVVUhIS2cyMEhuYkZoSTdWaE9PUU1WMXZVM05LdC9Obm5kd2Z4N0lZditjbmM0Zkt0Z1ptK1RwTQowc1Babml5bWlhdnlrRlczODl3Q2txRzREeFRoZTdqVklZQ3p0OVE1Q2hvSjlMSEJ5UlZoY0pjaC9SNE1ONXFOClFLVUNnZ0VBUURnOVdWbTlHV2RLelppQVRFaVVkTktXS1BlUHlnTUZUQmRENjhib3kxbnZjS05yWXhyNDRFTEIKWEJraUhTR1dPY2E5dnFqNXJHQklvQUZ0S1h1ajloTUF0b2Q1RWQyRDVtcWFMY0M5TlBJYnN2cmM3TS9lRmJFNgpEU1lwVXNxMEZKdm5IV1JXOXo4TVBnWUY4VVBWald4ZmE3bUFiOHFlTmpQRWx0anFHTnZuRHpmcTRSR0MvaUxpCmU5YUhrZUdTWGxpTW9kZTJFT3o2NXJFSFYzYjFSdER0akJvelNwTHkveXNLeStVUTArN1RJV1BSSTE2aWl6cG0KOVVPQTBrK1Y2MjhSQUdKSDVLOVRhbHptL3ZIaUc4MkcvOXpreG9ZTlZxeUR2VjRVTmcxRGd6QWtUcjdLdEFVegpOMlM1UkhsaENHVHNjdDlZWjhaOFNMNmdvbE1vZ1E9PQ==

