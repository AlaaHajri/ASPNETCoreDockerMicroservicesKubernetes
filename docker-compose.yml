version: '3.9'
networks:
  web:
    name: web.networks
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16 
          gateway: 172.21.0.1
  redis: 
    name: user.data.networks
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1
  rabbitmq: 
    name: rabbitmq.networks
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16 
          gateway: 172.19.0.1 
  database: 
    name: database.networks
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
          gateway: 172.20.0.1

volumes:
  mssql-linux-volume:
    driver: local
  user-data-volume:
    driver: local
  rabbitmq-volume:
    driver: local  

services:
  mssql-linux: ### sql.data #3
    container_name: mssql-linux
    image: mssql-linux
    build:
      context: ./Database
      dockerfile: Dockerfile
    ports:
      - "5433:1433"
    restart: on-failure
    networks:
      - database
      - rabbitmq
      - redis
    volumes:
      - mssql-linux-volume:/var/opt/mssql/data

  user-data: ### user.data  #1
    container_name: user-data
    image: redis  
    ports:
      - "6379:6379"               # Exposition du port 6379.
    restart: on-failure
    networks:
      - redis
    volumes:
      - user-data-volume:/data

  rabbitmq: ### rabbitmq #2
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "15672:15672"             # il expose les ports 15672 et 5672.
      - "5672:5672"               # On peux fermer le port 5672
    healthcheck:
        test: ["CMD", "rabbitmq-diagnostics", "status"]
        interval: 10s
        timeout: 5s
        retries: 3
    restart: on-failure
    networks:
      - rabbitmq
    volumes:
      - rabbitmq-volume:/_data
      - rabbitmq-volume:/var/lib/rabbitmq

  service-api-applicants: ### applicants.api #4
    container_name: service-api-applicants
    image: service-api-applicants
    build:
      context: .
      dockerfile: Dockerfile.applicantsapi
    environment:
      - ConnectionString=Server=mssql-linux;User=sa;Password=Pass@word;Database=dotnetgigs.applicants
      - HostRabbitmq=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      rabbitmq:
          condition: service_healthy
    restart: on-failure
    networks:
      - rabbitmq
      - web  

  service-api-jobs: ### jobs.api #5
    container_name: service-api-jobs
    image: service-api-jobs
    build:
      context: .
      dockerfile: Dockerfile.jobsapi      
    environment:
      - ConnectionString=Server=mssql-linux;User=sa;Password=Pass@word;Database=dotnetgigs.jobs
      - HostRabbitmq=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      rabbitmq:
          condition: service_healthy
    restart: on-failure
    networks:
      - rabbitmq
      - web  

  service-api-identity: ### identity.api  #6
    container_name: service-api-identity
    image: service-api-identity
    build:
      context: .
      dockerfile: Dockerfile.identityapi
    environment:
      - RedisHost=user-data:6379
      - HostRabbitmq=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      rabbitmq:
          condition: service_healthy
    restart: on-failure
    networks:
      - rabbitmq
      - redis
      - web   
          
  web: ### web #7
    container_name: web
    image: web
    build:
      context: .
      dockerfile: Dockerfile.web
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      SERVICE_API_IDENTITY: http://service-api-identity
      SERVICE_API_JOBS: http://service-api-jobs
    ports: 
      - "80:80"
    depends_on:
      - service-api-identity
      - service-api-jobs
      - service-api-applicants
    restart: on-failure
    networks:
      - web      